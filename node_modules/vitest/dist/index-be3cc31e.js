import { g as getCurrentSuite, w as withTimeout, a as getDefaultHookTimeout, b as getState, s as setState, c as suite, t as test, d as describe, i as it, v as vitest, e as vi } from './vi-85b65e90.js';
import chai, { assert, should } from 'chai';
import { s as spies, a as spyOn, f as fn } from './jest-mock-4a754991.js';

const beforeAll = (fn, timeout) => getCurrentSuite().on("beforeAll", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const afterAll = (fn, timeout) => getCurrentSuite().on("afterAll", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const beforeEach = (fn, timeout) => getCurrentSuite().on("beforeEach", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const afterEach = (fn, timeout) => getCurrentSuite().on("afterEach", withTimeout(fn, timeout ?? getDefaultHookTimeout()));

const expect = (value, message) => {
  const { assertionCalls } = getState();
  setState({ assertionCalls: assertionCalls + 1 });
  return chai.expect(value, message);
};
Object.assign(expect, chai.expect);

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  suite: suite,
  test: test,
  describe: describe,
  it: it,
  beforeAll: beforeAll,
  afterAll: afterAll,
  beforeEach: beforeEach,
  afterEach: afterEach,
  assert: assert,
  should: should,
  chai: chai,
  expect: expect,
  spies: spies,
  spyOn: spyOn,
  fn: fn,
  vitest: vitest,
  vi: vi
});

export { afterAll as a, beforeAll as b, beforeEach as c, afterEach as d, expect as e, index as i };
